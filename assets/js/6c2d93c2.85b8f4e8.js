"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[2708],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,g=d["".concat(l,".").concat(c)]||d[c]||m[c]||a;return n?i.createElement(g,o(o({ref:t},u),{},{components:n})):i.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=n(7462),r=(n(7294),n(4137));const a={id:"getting-started-for-android-engineers",title:"Getting Started for Android Engineers",slug:"getting-started-for-android-engineers"},o="Introduction",s={unversionedId:"getting-started/engineers/getting-started-for-android-engineers",id:"getting-started/engineers/getting-started-for-android-engineers",title:"Getting Started for Android Engineers",description:"Nimbus is an experimentation platform from Mozilla.",source:"@site/docs/getting-started/engineers/01-android-integration.md",sourceDirName:"getting-started/engineers",slug:"/getting-started/engineers/getting-started-for-android-engineers",permalink:"/getting-started/engineers/getting-started-for-android-engineers",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/getting-started/engineers/01-android-integration.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"getting-started-for-android-engineers",title:"Getting Started for Android Engineers",slug:"getting-started-for-android-engineers"},sidebar:"sidebar",previous:{title:"Getting started with implementation",permalink:"/getting-started/engineers/for-engineers"},next:{title:"Getting Started for iOS Engineers",permalink:"/getting-started/engineers/getting-started-for-ios-engineers"}},l={},p=[{value:"Building with the Nimbus FML gradle plugin",id:"building-with-the-nimbus-fml-gradle-plugin",level:2},{value:"<code>NimbusBuilder</code> configuration",id:"nimbusbuilder-configuration",level:2},{value:"Getting errors out of <code>Nimbus</code>",id:"getting-errors-out-of-nimbus",level:3},{value:"Connecting the <code>NimbusInterface</code> to FML generated code",id:"connecting-the-nimbusinterface-to-fml-generated-code",level:3},{value:"Handling First Run experiments",id:"handling-first-run-experiments",level:3},{value:"To check if the firstrun experiment merged into beta to catch the next release",id:"to-check-if-the-firstrun-experiment-merged-into-beta-to-catch-the-next-release",level:4},{value:"Using the experiments preview collection",id:"using-the-experiments-preview-collection",level:3},{value:"A complete <code>NimbusBuilder</code> example",id:"a-complete-nimbusbuilder-example",level:2},{value:"Instrumenting the app for testing",id:"instrumenting-the-app-for-testing",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Nimbus is an experimentation platform from Mozilla."),(0,r.kt)("p",null,"This document shows you how to set up the Nimbus SDK with a new Android app. It assumes that your app is already using the Glean SDK and Android Components."),(0,r.kt)("h1",{id:"building-with-nimbus"},"Building with Nimbus"),(0,r.kt)("p",null,"Nimbus is distributed through bundled Rust code as part of Mozilla's Application Services ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mozilla/application-services/blob/main/docs/design/megazords.md"},'"Megazord"'),"."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"app/build.gradle"),", in the ",(0,r.kt)("inlineCode",{parentName:"p"},"dependencies")," block, include the ",(0,r.kt)("inlineCode",{parentName:"p"},"implementation")," line for Nimbus:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},'dependencies {\n    \u2026\n    implementation "org.mozilla.appservices:nimbus:${Versions.mozilla_appservices}"\n    \u2026\n}\n')),(0,r.kt)("h2",{id:"building-with-the-nimbus-fml-gradle-plugin"},"Building with the Nimbus FML gradle plugin"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/fml-spec"},"Feature Manifest Language")," provides type-safe access to configuration coming out of the Nimbus SDK, and is used to configure your application features, by\ngenerating Kotlin from a Feature Manifest."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tooling-nimbus-gradle")," plugin manages the download of the tooling, the generating of the Kotlin code, and is configured by gradle."),(0,r.kt)("p",null,"In your top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},'buildscript {\n    dependencies {\n        classpath "org.mozilla.appservices:tooling-nimbus-gradle:${Versions.mozilla_appservices}"\n    }\n}\n')),(0,r.kt)("p",null,"and in ",(0,r.kt)("inlineCode",{parentName:"p"},"app/build.gradle"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},'apply plugin: "org.mozilla.appservices.nimbus-gradle-plugin"\n\nnimbus {\n    // The path to the Nimbus feature manifest file\n    manifestFile = "nimbus.fml.yaml"\n\n    // Map from the variant name to the channel as experimenter and nimbus understand it.\n    // If nimbus\'s channels were accurately set up well for this project, then this\n    // shouldn\'t be needed.\n    channels = [\n            debug: "debug",\n            nightly: "nightly",\n            beta: "beta",\n            release: "release",\n    ]\n    \n    // This is generated by the FML and should be checked into git.\n    // It will be fetched by Experimenter (the Nimbus experiment website)\n    // and used to inform experiment configuration.\n    //\n    // *NOTE*: This value is optional, and is not necessary when Nimbus is being used\n    // as part of a library.\n    experimenterManifest = ".experimenter.yaml"\n    \n    // This is an optional value, and updates the plugin to use a copy of application\n    // services. The path should be relative to the root project directory.\n    // *NOTE*: This example will not work for all projects, but should work for Fenix, Focus, and Android Components\n    applicationServicesDir = gradle.hasProperty(\'localProperties.autoPublish.application-services.dir\') \n        ? gradle.getProperty(\'localProperties.autoPublish.application-services.dir\') : null\n}\n')),(0,r.kt)("p",null,"In this case, it should generate a file named in the ",(0,r.kt)("inlineCode",{parentName:"p"},"nimbus.fml.yaml")," file. In the case of Fenix, this is called ",(0,r.kt)("inlineCode",{parentName:"p"},"FxNimbus"),"."),(0,r.kt)("h1",{id:"the-start-up-sequence"},"The start-up sequence"),(0,r.kt)("p",null,"Before using Nimbus in your Android app, you need to start it."),(0,r.kt)("p",null,"The Nimbus SDK is a configuration store, making configuration available to the any thread, and \u2014 to a first approximation\u2014 to be immutable within the same session of the app."),(0,r.kt)("p",null,"For this reason, we want to be starting the Nimbus SDK as close to the beginning of the start of the app as possible."),(0,r.kt)("p",null,"In Firefox for Android and Focus for Android, this is done at the beginning of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application#onCreate()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class MyApplication: Application() {\n\n    lateinit var nimbus: NimbusInterface\n\n    override fun onCreate() {\n        beginNimbusSetup()\n\n\n        // do the rest of the set up here.\n\n        finishNimbusSetup()\n    }\n\n    fun beginNimbusSetup() {\n        Megazord.init()\n\n        nimbus = createNimbus(this, NIMBUS_REMOTE_SETTINGS_ENDPOINT)\n    }\n\n    fun finishNimbusSetup() {\n        nimbus.fetchExperiments()\n    }\n\n    fun createNimbus(context: Context, urlString: String): NimbusInterface {\n        val isAppFirstRun = context.settings().isFirstRun\n        val customTargetingAttibutes = JSONObject().apply {\n            // Put any custom attributes you want to use to segment an audience on to\n            // target your experiments.\n            put("is_first_run", isAppFirstRun)\n        }\n\n        val appInfo = NimbusAppInfo(\n            appName = "my-app-name",\n            channel = BuildConfig.BUILD_TYPE,\n            customTargetingAttributes = customTargetingAttributes\n        )\n\n        // Use the Nimbus builder to build a NimbusInterface object.\n        return NimbusBuilder(context).apply {\n            url = urlString\n            errorReporter = { message, e ->\n                Logger.error("Nimbus error: $message", e)\n            }\n\n        }.build(appInfo)\n    }\n}\n')),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"Megazord.init()")," is called before ",(0,r.kt)("inlineCode",{parentName:"li"},"createNimbus()"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"createNimbus")," uses a ",(0,r.kt)("inlineCode",{parentName:"li"},"NimbusBuilder")," to create the Nimbus object."),(0,r.kt)("li",{parentName:"ol"},"We build a ",(0,r.kt)("inlineCode",{parentName:"li"},"JSONObject")," of custom targeting attributes."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"nimbus.fetchExperiments()")," method is called sometime at or after the app has started.")),(0,r.kt)("h2",{id:"nimbusbuilder-configuration"},(0,r.kt)("inlineCode",{parentName:"h2"},"NimbusBuilder")," configuration"),(0,r.kt)("h3",{id:"getting-errors-out-of-nimbus"},"Getting errors out of ",(0,r.kt)("inlineCode",{parentName:"h3"},"Nimbus")),(0,r.kt)("p",null,"By design, Nimbus is deliberately unobtrusive; if it fails then it should not crash, but continue as if not enrolled in any experiments."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"errorReporter")," callback is there to connect ",(0,r.kt)("inlineCode",{parentName:"p"},"Nimbus")," to any error reporting framework in the rest of the app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'    return NimbusBuilder(context).apply {\n        //\xa0\u2026\n        errorReporter = { message, e ->\n            Logger.error("Nimbus error: $message", e)\n        }\n        // \u2026\n    }.build(appInfo)\n')),(0,r.kt)("h3",{id:"connecting-the-nimbusinterface-to-fml-generated-code"},"Connecting the ",(0,r.kt)("inlineCode",{parentName:"h3"},"NimbusInterface")," to FML generated code"),(0,r.kt)("p",null,"The FML generated code has a runtime dependency on the ",(0,r.kt)("inlineCode",{parentName:"p"},"NimbusInterface"),"."),(0,r.kt)("p",null,"To connect it to the Nimbus object, we need to tell the ",(0,r.kt)("inlineCode",{parentName:"p"},"NimbusBuilder"),". In this case, the generated class is ",(0,r.kt)("inlineCode",{parentName:"p"},"FxNimbus"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"    return NimbusBuilder(context).apply {\n        // \u2026\n        // Connect FxNimbus to the Nimbus SDK.\n        featureManifest = FxNimbus\n        // \u2026\n    }.build(appInfo)\n")),(0,r.kt)("h3",{id:"handling-first-run-experiments"},"Handling First Run experiments"),(0,r.kt)("p",null,"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchExperiments")," from the remote settings URL is slow, and we wish to be able have access to the Nimbus experimental configuration as early in start up as possible, Nimbus downloads and caches the experiment recipes on the ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),"th run of the app and only applies them and makes them available to the app at the beginning of the ",(0,r.kt)("em",{parentName:"p"},"next")," i.e. the ",(0,r.kt)("inlineCode",{parentName:"p"},"(n + 1)"),"th run of the app."),(0,r.kt)("p",null,"Astute readers will notice that when ",(0,r.kt)("inlineCode",{parentName:"p"},"n = 0"),", i.e. the very first time the app is run, there are no experiment recipes downloaded. If Remote Settings experiment recipes JSON payload is available as a ",(0,r.kt)("inlineCode",{parentName:"p"},"raw/")," resource, it can be loaded in at first run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"    return NimbusBuilder(context).apply {\n        // \u2026\n        isFirstRun = isAppFirstRun\n        initialExperiments = R.raw.initial_experiments\n        timeoutLoadingExperiment = TIME_OUT_LOADING_EXPERIMENT_FROM_DISK_MS // defaults to 200 (ms)\n        // \u2026\n    }.build(appInfo)\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"initial_experiments.json")," file can be downloaded, either as part of the build, or in an automated/timed job. e.g. this is the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mozilla-mobile/fenix/blob/main/.github/workflows/fenix-update-nimbus-experiments.yml"},"Github Action workflow used by Fenix"),"."),(0,r.kt)("h4",{id:"to-check-if-the-firstrun-experiment-merged-into-beta-to-catch-the-next-release"},"To check if the firstrun experiment merged into beta to catch the next release"),(0,r.kt)("p",null,"First run experiments need to be in the beta build 8-11 days before release, so that they are in the release candidate.  Final build happens 8 days before release on Monday - so best to get in and uplift approved by Friday at the latest.  On Android the Release Candidate goes out to 5% of users a week before general release."),(0,r.kt)("p",null,"After the change is made in Nimbus/Experimenter to launch, enrollment end, or end the experiment - a github action kicks off the PR automatically to update 'initial_experiments.json'.  Then a mobile engineer needs to r+ that PR and request uplift to Beta.  If you replace 'version number' in the following file name, you can check this file to see if the experiment config is in the right state before release candidate build ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/mozilla-mobile/firefox-android/releases_v'version"},"https://raw.githubusercontent.com/mozilla-mobile/firefox-android/releases_v'version")," number'/fenix/app/src/main/res/raw/initial_experiments.json."),(0,r.kt)("h3",{id:"using-the-experiments-preview-collection"},"Using the experiments preview collection"),(0,r.kt)("p",null,"The preview collection is a staging area for new experiments to be tested on the device. This should be toggleable via the UI, but should trigger a restart."),(0,r.kt)("p",null,"Adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"usePreviewCollection")," flag allows the builder to configure a ",(0,r.kt)("inlineCode",{parentName:"p"},"NimbusInterface")," object connected to the experiment recipes in the preview collection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"        // Use the Nimbus builder to build a NimbusInterface object.\n        return NimbusBuilder(context).apply {\n            // \u2026\n            usePreviewCollection = context.settings().nimbusUsePreview\n            // \u2026\n        }.build(appInfo)\n")),(0,r.kt)("h2",{id:"a-complete-nimbusbuilder-example"},"A complete ",(0,r.kt)("inlineCode",{parentName:"h2"},"NimbusBuilder")," example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'    return NimbusBuilder(context).apply {\n        url = urlString\n        errorReporter = { message, e ->\n            Logger.error("Nimbus error: $message", e)\n        }\n        initialExperiments = R.raw.initial_experiments\n        usePreviewCollection = context.settings().nimbusUsePreview\n        isFirstRun = isAppFirstRun\n        sharedPreferences = context.settings().preferences\n        // Optional callbacks.\n        onCreateCallback = { nimbus ->\n            // called when nimbus is set up\n        }\n        onFetchCallback = {\n            // called each time the app fetches experiments\n        }\n        onApplyCallback = {\n            // called each time the applies the fetched experiments.\n        }\n    }.build(appInfo)\n')),(0,r.kt)("h2",{id:"instrumenting-the-app-for-testing"},"Instrumenting the app for testing"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/nimbus-cli"},(0,r.kt)("inlineCode",{parentName:"a"},"nimbus-cli"))," allows QA and engineers to launch the app in different experimental configurations. It largely obviates the need for configuring Nimbus to use the preview collection, above."),(0,r.kt)("p",null,"To connect the ",(0,r.kt)("inlineCode",{parentName:"p"},"NimbusInterface")," object to the command line, we need to feed the intent from the app's launch activity to the ",(0,r.kt)("inlineCode",{parentName:"p"},"NimbusInterface"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"\nimport org.mozilla.experiments.nimbus.initializeTooling\n\nopen class HomeActivity : AppCompatActivity() {)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // Find the nimbus singleton\n        val app = application as MyApplication\n        val nimbus = app.nimbus\n        // Pass it the launch intent\n        nimbus.initializeTooling(applicationContext, intent)\n        // \u2026\n    }\n")))}m.isMDXComponent=!0}}]);