"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[6159],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||a;return n?r.createElement(d,l(l({ref:t},c),{},{components:n})):r.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(7462),i=(n(7294),n(4137));const a={id:"nimbus-cli-working-with-patch-files",title:"Working with Patch Files",slug:"/nimbus-cli/working-with-patch-files"},l=void 0,o={unversionedId:"deep-dives/mobile/nimbus-cli/nimbus-cli-working-with-patch-files",id:"deep-dives/mobile/nimbus-cli/nimbus-cli-working-with-patch-files",title:"Working with Patch Files",description:"The nimbus-cli lets you source experiments from multiple places and then change them before inserting them into the app where they can be evaluated, and the app can naturally enroll into them.",source:"@site/docs/deep-dives/mobile/nimbus-cli/55-working-with-patch-files.mdx",sourceDirName:"deep-dives/mobile/nimbus-cli",slug:"/nimbus-cli/working-with-patch-files",permalink:"/nimbus-cli/working-with-patch-files",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/mobile/nimbus-cli/55-working-with-patch-files.mdx",tags:[],version:"current",sidebarPosition:55,frontMatter:{id:"nimbus-cli-working-with-patch-files",title:"Working with Patch Files",slug:"/nimbus-cli/working-with-patch-files"},sidebar:"sidebar",previous:{title:"Working with Files",permalink:"/nimbus-cli/working-with-files"},next:{title:"Working with Logs",permalink:"/nimbus-cli/working-with-logs"}},s={},p=[{value:"<code>--patch FILE</code>",id:"--patch-file",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"nimbus-cli")," lets you source experiments from multiple places and then change them before inserting them into the app where they can be evaluated, and the app can naturally enroll into them."),(0,i.kt)("p",null,"When experimenting on more complicated features, the configuration itself may need to be patched."),(0,i.kt)("h2",{id:"--patch-file"},(0,i.kt)("inlineCode",{parentName:"h2"},"--patch FILE")),(0,i.kt)("p",null,"Any command that takes an experiment as an argument (",(0,i.kt)("inlineCode",{parentName:"p"},"enroll"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"features"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"validate"),") accepts a patch file."),(0,i.kt)("p",null,"The file is of the format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "$feature-id": { \u2026 configuration patch \u2026 }\n}\n')),(0,i.kt)("p",null,"for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "messaging": {\n        "triggers": {\n            "AFTER_THREE_LAUNCHES_THIS_WEEK": "true",\n            "ALLOWED_TIPS_NOTIFICATIONS": "true",\n            "INACTIVE_NEW_USER": "true",\n            "I_AM_DEFAULT_BROWSER": "true",\n            "I_AM_NOT_DEFAULT_BROWSER": "true",\n            "MORE_THAN_24H_SINCE_INSTALLED_OR_UPDATED": "true",\n            "NOT_INSTALLED_TODAY": "true",\n            "NOT_LAUNCHED_YESTERDAY": "true",\n            "USER_RECENTLY_INSTALLED": "true",\n            "USER_RECENTLY_UPDATED": "true"\n        }\n    },\n\n    "onboarding": {\n        "conditions": {\n            "I_AM_DEFAULT_BROWSER": "false",\n        }\n    }\n}\n')),(0,i.kt)("p",null,"You can generate a defaults file with the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaults")," command, or for individual features:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel release defaults --output defaults.json\n")),(0,i.kt)("p",null,"or using the --multi option with ",(0,i.kt)("inlineCode",{parentName:"p"},"features"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel release features mobile-default-browser-cta-copy-test-ios --branch treatment-a --multi --output feature.json\n")),(0,i.kt)("p",null,"You can hand edit these files, or write ",(0,i.kt)("inlineCode",{parentName:"p"},"jq")," scripts to change them:"),(0,i.kt)("p",null,"For example, switching the triggers for all messages to ",(0,i.kt)("inlineCode",{parentName:"p"},'["ALWAYS"]')," in a messaging experiment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"jq '.messaging|{ messaging: { messages: .messages|map_values({ trigger: [\\\"ALWAYS\\\"]}) } }' feature.json > patch.json\n")),(0,i.kt)("p",null,"However you get the patch file: the patch file is applied to each feature in each branch."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel developer features mobile-default-browser-cta-copy-test-ios --branch treatment-a --patch patch.json --multi\n")),(0,i.kt)("p",null,"Notice how the additional triggers are added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"messaging")," feature. The ",(0,i.kt)("inlineCode",{parentName:"p"},"onboarding")," feature from the patch file is ignored because it is not involved in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mobile-default-browser-cta-copy-test-ios")," experiment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "messaging": {\n    "actions": {},\n    "messages": {\n      "default-browser": {\n        "action": "MAKE_DEFAULT_BROWSER_WITH_TUTORIAL",\n        "button-label": "Open My Links With Firefox",\n        "experiment": "{experiment}",\n        "style": "FALLBACK",\n        "surface": "new-tab-card",\n        "text": "Default Browser/DefaultBrowserCard.Description",\n        "title": "Default Browser/DefaultBrowserCard.Title",\n        "trigger": [\n          "I_AM_NOT_DEFAULT_BROWSER",\n          "SUPPORTS_DEFAULT_BROWSER"\n        ]\n      }\n    },\n    "on-control": "show-next-message",\n    "styles": {},\n    "triggers": {\n      "AFTER_THREE_LAUNCHES_THIS_WEEK": "true",\n      "ALLOWED_TIPS_NOTIFICATIONS": "true",\n      "INACTIVE_NEW_USER": "true",\n      "I_AM_DEFAULT_BROWSER": "true",\n      "I_AM_NOT_DEFAULT_BROWSER": "true",\n      "MORE_THAN_24H_SINCE_INSTALLED_OR_UPDATED": "true",\n      "NOT_INSTALLED_TODAY": "true",\n      "NOT_LAUNCHED_YESTERDAY": "true",\n      "USER_RECENTLY_INSTALLED": "true",\n      "USER_RECENTLY_UPDATED": "true"\n    }\n  }\n}\n')),(0,i.kt)("p",null,"You can then enroll the patched experiment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel developer enroll mobile-default-browser-cta-copy-test-ios --branch treatment-a --patch patch.json\n")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"enroll"),", which accept multiple experiment slugs, then the same patch file is applied before sending to disk or the device."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli fetch viewpoint-ios-july-2023 mobile-default-browser-cta-copy-test-ios --patch patch.json --output archived-with-patch.json\n")))}m.isMDXComponent=!0}}]);