"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[1337],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(t),c=i,k=m["".concat(o,".").concat(c)]||m[c]||u[c]||r;return t?a.createElement(k,l(l({ref:n},d),{},{components:t})):a.createElement(k,l({ref:n},d))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=c;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p[m]="string"==typeof e?e:i,l[1]=p;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6045:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=t(7462),i=(t(7294),t(4137));const r={id:"nimbus-cli-opening-and-resetting",title:"Opening and resetting the app",slug:"/nimbus-cli/opening-and-resetting"},l=void 0,p={unversionedId:"deep-dives/mobile/nimbus-cli/nimbus-cli-opening-and-resetting",id:"deep-dives/mobile/nimbus-cli/nimbus-cli-opening-and-resetting",title:"Opening and resetting the app",description:"The commands that open the app do so by simulating the app's launch as if the user tapped on the app icon on the phone; these are:",source:"@site/docs/deep-dives/mobile/nimbus-cli/30-opening-and-resetting.mdx",sourceDirName:"deep-dives/mobile/nimbus-cli",slug:"/nimbus-cli/opening-and-resetting",permalink:"/nimbus-cli/opening-and-resetting",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/mobile/nimbus-cli/30-opening-and-resetting.mdx",tags:[],version:"current",sidebarPosition:30,frontMatter:{id:"nimbus-cli-opening-and-resetting",title:"Opening and resetting the app",slug:"/nimbus-cli/opening-and-resetting"},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/nimbus-cli/getting-started"},next:{title:"Working with Features",permalink:"/nimbus-cli/working-with-features"}},o={},s=[{value:"Deeplinking",id:"deeplinking",level:2},{value:"<code>open</code>",id:"open",level:3},{value:"<code>enroll</code>",id:"enroll",level:3},{value:"<code>test-feature</code>",id:"test-feature",level:3},{value:"Terminating and Resetting the app",id:"terminating-and-resetting-the-app",level:2},{value:"Passthrough parameters",id:"passthrough-parameters",level:2},{value:"Trailing parameters for apps",id:"trailing-parameters-for-apps",level:3},{value:"Leading parameters",id:"leading-parameters",level:3},{value:"Platform specific passthrough parameters",id:"platform-specific-passthrough-parameters",level:4}],d={toc:s},m="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The commands that open the app do so by simulating the app's launch as if the user tapped on the app icon on the phone; these are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enroll")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unenroll")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test-feature")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"apply-file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log-state")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"open"),".")),(0,i.kt)("p",null,"In addition, the ",(0,i.kt)("inlineCode",{parentName:"p"},"enroll"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"open")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"test-feature")," commands, can launch the app with a deeplink."),(0,i.kt)("h2",{id:"deeplinking"},"Deeplinking"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"nimbus-cli")," knows the apps' deeplinking schemes, and if no ",(0,i.kt)("inlineCode",{parentName:"p"},"://")," is detected in the deeplink, then the deeplink scheme is appended."),(0,i.kt)("h3",{id:"open"},(0,i.kt)("inlineCode",{parentName:"h3"},"open")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel developer open\n")),(0,i.kt)("p",null,"launches the app with ",(0,i.kt)("inlineCode",{parentName:"p"},"simctl"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ xcrun simctl launch \\\n        booted \\\n        org.mozilla.ios.Fennec \\\n        --nimbus-cli \\\n        --version \\\n        1\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel developer open --deeplink deep-link?url=settings/general\n")),(0,i.kt)("p",null,"opens the deeplink (i.e. not sending directly to the app) with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ xcrun simctl openurl \\\n        booted \\\n        fennec://deep-link?url=settings/general\n")),(0,i.kt)("p",null,"By default, each of the commands that launches the app also kills the app right before; with the ",(0,i.kt)("inlineCode",{parentName:"p"},"open")," command you can send the app a deeplink without killing it, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--no-clobber")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nimbus-cli --app firefox_ios --channel developer enroll ios-set-to-default-in-onboarding-final --branch treatment-a\nnimbus-cli --app firefox_ios --channel developer open --deeplink deep-link?url=onboarding/privacy-first --no-clobber\n")),(0,i.kt)("admonition",{title:"Deeplinks for other commands:",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"iOS ",(0,i.kt)("inlineCode",{parentName:"p"},"simctl")," does not support command line arguments with the ",(0,i.kt)("inlineCode",{parentName:"p"},"openurl")," command, and only supports a URL length of 2047."),(0,i.kt)("p",{parentName:"admonition"},"Opening with a deeplink while enrolling in an experiment is supported but requires a different route. See ",(0,i.kt)("a",{parentName:"p",href:"/nimbus-cli/on-devices"},"Working with Devices"),".")),(0,i.kt)("h3",{id:"enroll"},(0,i.kt)("inlineCode",{parentName:"h3"},"enroll")),(0,i.kt)("p",null,"For Android, opening a deeplink uses the same mechanism as launching the app: using Intents. Thus, we can enroll in an experiment and then open the app with a deeplink."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app fenix --channel developer enroll release-android-onboarding-redesign --branch treatment-a --deeplink onboarding/privacy-first\n")),(0,i.kt)("h3",{id:"test-feature"},(0,i.kt)("inlineCode",{parentName:"h3"},"test-feature")),(0,i.kt)("p",null,"Similarly, you can use a ",(0,i.kt)("inlineCode",{parentName:"p"},"--deeplink")," to enroll a ",(0,i.kt)("a",{parentName:"p",href:"/nimbus-cli/working-with-features"},(0,i.kt)("inlineCode",{parentName:"a"},"test-feature"))," experiment."),(0,i.kt)("h2",{id:"terminating-and-resetting-the-app"},"Terminating and Resetting the app"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"open"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"enroll")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"test-feature")," all support a ",(0,i.kt)("inlineCode",{parentName:"p"},"--reset-app")," option, which serves to reset the app back to its just-installed state before opening."),(0,i.kt)("h2",{id:"passthrough-parameters"},"Passthrough parameters"),(0,i.kt)("p",null,"Opening apps with ",(0,i.kt)("inlineCode",{parentName:"p"},"nimbus-cli")," provides an abstraction over ",(0,i.kt)("inlineCode",{parentName:"p"},"adb shell start am")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"xcrun simctl launch"),"."),(0,i.kt)("p",null,"Passthrough parameters offer a small escape hatch from this abstraction."),(0,i.kt)("h3",{id:"trailing-parameters-for-apps"},"Trailing parameters for apps"),(0,i.kt)("p",null,"You may want to send additional command line parameters to these commands. You can do this by appending them with ",(0,i.kt)("inlineCode",{parentName:"p"},"--")," after the ",(0,i.kt)("inlineCode",{parentName:"p"},"open"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"enroll"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"test-feature")," commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel developer open --reset-app -- FIREFOX_TEST FIREFOX_SKIP_INTRO\n")),(0,i.kt)("p",null,"This produces an ",(0,i.kt)("inlineCode",{parentName:"p"},"xcrun")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ xcrun simctl launch \\\n        booted \\\n        org.mozilla.ios.Fennec \\\n        FIREFOX_TEST \\\n        FIREFOX_SKIP_INTRO\n")),(0,i.kt)("p",null,"These are entirely app specific. e.g. Firefox for iOS has the launch parameters available in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mozilla-mobile/firefox-ios/blob/main/Shared/LaunchArguments.swift"},(0,i.kt)("inlineCode",{parentName:"a"},"LaunchArguments.swift")),"."),(0,i.kt)("p",null,"For Android apps, you can modify the intent being sent to the device with ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/tools/adb#IntentSpec"},"intent arguments"),". The most saliant are reproduced here:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Extra parameters"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--esn extra_key")),(0,i.kt)("td",{parentName:"tr",align:null},"Add a null extra. This option is not supported for URI intents.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--es extra_key extra_string_value")),(0,i.kt)("td",{parentName:"tr",align:null},"Add string data as a key-value pair.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--ez extra_key extra_boolean_value")),(0,i.kt)("td",{parentName:"tr",align:null},"Add boolean data as a key-value pair.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--ei extra_key extra_int_value")),(0,i.kt)("td",{parentName:"tr",align:null},"Add integer data as a key-value pair.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--el extra_key extra_long_value")),(0,i.kt)("td",{parentName:"tr",align:null},"Add long data as a key-value pair.")))),(0,i.kt)("p",null,"For a fictional example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app fenix --channel developer open --reset-app -- --esn SKIP_INTRO\n")),(0,i.kt)("p",null,"produces an ",(0,i.kt)("inlineCode",{parentName:"p"},"adb")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'$ adb shell "am start -n org.mozilla.fenix.debug/.App \\\n        -a android.intent.action.MAIN \\\n        -c android.intent.category.LAUNCHER \\\n        --esn \\\n        SKIP_INTRO"\n')),(0,i.kt)("h3",{id:"leading-parameters"},"Leading parameters"),(0,i.kt)("p",null,"For finer control of ",(0,i.kt)("inlineCode",{parentName:"p"},"xcrun")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"adb"),", you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," as a positional indicator:"),(0,i.kt)("p",null,"For example, to enable debugging, you need to pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"-D")," parameter:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app fenix --channel developer open -- -D {}\n")),(0,i.kt)("p",null,"This produces an ",(0,i.kt)("inlineCode",{parentName:"p"},"adb")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},' adb shell "am start -D \\\n        -n org.mozilla.fenix.debug/.App \\\n        -a android.intent.action.MAIN \\\n        -c android.intent.category.LAUNCHER"\n')),(0,i.kt)("p",null,"Leading and trailing parameters can be combined, and used with any combination of ",(0,i.kt)("inlineCode",{parentName:"p"},"open"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"test-feature")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"enroll"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"nimbus-cli --app firefox_ios --channel developer \\\n        enroll ios-search-bar-placement-v2-treatment-a-rollout --branch treatment-a \\\n        -- \\\n        --console-pty {} FIREFOX_SKIP_INTRO\n")),(0,i.kt)("h4",{id:"platform-specific-passthrough-parameters"},"Platform specific passthrough parameters"),(0,i.kt)("p",null,"Leading parameters are platform specific:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"adb shell am")," can be configured with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-D"),": Enable debugging."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-W"),": Wait for launch to complete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--start-profiler file"),": Start profiler and send results to ",(0,i.kt)("inlineCode",{parentName:"li"},"file"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-P file"),": Like ",(0,i.kt)("inlineCode",{parentName:"li"},"--start-profiler"),", but profiling stops when the app goes idle."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-R count"),": Repeat the activity launch ",(0,i.kt)("inlineCode",{parentName:"li"},"count")," times. Prior to each repeat, the top activity will be finished."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-S"),": Force stop the target app before starting the activity."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--opengl-trace"),": Enable tracing of OpenGL functions."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--user user_id | current"),": Specify which user to run as; if not specified, then run as the current user.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"xcrun simctl launch")," can be configured with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--console")," Block and print the application's stdout and stderr to the current terminal.\nSignals received by simctl are passed through to the application.\n(Cannot be combined with --stdout or --stderr)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--console-pty")," Block and print the application's stdout and stderr to the current terminal via a PTY.\nSignals received by simctl are passed through to the application.\n(Cannot be combined with --stdout or --stderr)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--stdout=<path>")," Redirect the application's standard output to a file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--stderr=<path>")," Redirect the application's standard error to a file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--terminate-running-process")," Terminate any running copy of the application.\nNote: Log output is often directed to stderr, not stdout.")))}u.isMDXComponent=!0}}]);