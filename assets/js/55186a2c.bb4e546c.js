"use strict";(self.webpackChunkexperimenter_docs=self.webpackChunkexperimenter_docs||[]).push([[9902],{4137:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>f});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=t.createContext({}),p=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=p(e.components);return t.createElement(o.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),c=i,f=u["".concat(o,".").concat(c)]||u[c]||m[c]||r;return a?t.createElement(f,l(l({ref:n},d),{},{components:a})):t.createElement(f,l({ref:n},d))}));function f(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[u]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=a[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1345:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var t=a(7462),i=(a(7294),a(4137));const r={id:"fml-string-alias",title:"Using string alias",slug:"/fml/string-alias",sidebar_position:6},l=void 0,s={unversionedId:"deep-dives/specifications/fml/fml-string-alias",id:"deep-dives/specifications/fml/fml-string-alias",title:"Using string alias",description:"string-alias is a type alias annotations for feature variables in the feature manifest language. It defines a named set of strings which can be used and validated elsewhere in the feature manifest.",source:"@site/docs/deep-dives/specifications/fml/fml-string-alias.md",sourceDirName:"deep-dives/specifications/fml",slug:"/fml/string-alias",permalink:"/fml/string-alias",draft:!1,editUrl:"https://github.com/mozilla/experimenter-docs/edit/main/docs/deep-dives/specifications/fml/fml-string-alias.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"fml-string-alias",title:"Using string alias",slug:"/fml/string-alias",sidebar_position:6},sidebar:"sidebar",previous:{title:"Co-enrolling Features",permalink:"/fml/coenrolling-features"},next:{title:"Using prefs to override feature variables",permalink:"/fml/using-prefs"}},o={},p=[{value:"<code>string-alias</code> defines a named set of valid strings",id:"string-alias-defines-a-named-set-of-valid-strings",level:2},{value:"The named set is used to validate strings by experimenter",id:"the-named-set-is-used-to-validate-strings-by-experimenter",level:3},{value:"The named set can be added to by FML authors or experiment owners",id:"the-named-set-can-be-added-to-by-fml-authors-or-experiment-owners",level:3},{value:"Defining the named set of valid strings",id:"defining-the-named-set-of-valid-strings",level:2},{value:"String aliases can be used in nested objects",id:"string-aliases-can-be-used-in-nested-objects",level:3}],d={toc:p},u="wrapper";function m(e){let{components:n,...a}=e;return(0,i.kt)(u,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"string-alias")," is a type alias annotations for feature variables in the feature manifest language. It defines a named set of strings which can be used and validated elsewhere in the feature manifest."),(0,i.kt)("p",null,"It is named as a special case of typealiasing found in many languages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kt"},"typealias QueryName = String\nval queries = mapOf<QueryName, String>()\n")),(0,i.kt)("p",null,"In this kotlin example above, we are able to use ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," wherever we're able to use ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),", and vice versa: there is nothing else linking ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"queries"),"."),(0,i.kt)("h2",{id:"string-alias-defines-a-named-set-of-valid-strings"},(0,i.kt)("inlineCode",{parentName:"h2"},"string-alias")," defines a named set of valid strings"),(0,i.kt)("p",null,"In FML, the ",(0,i.kt)("inlineCode",{parentName:"p"},"string-alias")," belongs to the variable definition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    queries:\n        string-alias: QueryName\n        type: Map<QueryName, String>\n        default:\n            ALWAYS: 'true'\n")),(0,i.kt)("p",null,"Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," is defined as the set of ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),"s that are keys in the ",(0,i.kt)("inlineCode",{parentName:"p"},"queries")," map."),(0,i.kt)("p",null,"In the example above, we're defining a map of named queries. The default has one entry in."),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," is used again, its value is checked against this membership test, by the FML:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    available-if:\n        type: QueryName\n        default: ALWAYS\n")),(0,i.kt)("p",null,"Note that had the ",(0,i.kt)("inlineCode",{parentName:"p"},"queries")," map been empty, we could not have provided a default value for ",(0,i.kt)("inlineCode",{parentName:"p"},"available-if"),"."),(0,i.kt)("p",null,"Now that the ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," string-alias has been defined, it can be used in conjunction with any structural type definition for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    available-if:\n        type: Option<QueryName>\n        default: null\n")),(0,i.kt)("p",null,"This means that ",(0,i.kt)("inlineCode",{parentName:"p"},"available-if")," can be either a valid ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    available-if:\n        type: List<QueryName>\n        default: []\n")),(0,i.kt)("p",null,"This means that ",(0,i.kt)("inlineCode",{parentName:"p"},"available-if")," can be a list of valid ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," strings."),(0,i.kt)("h3",{id:"the-named-set-is-used-to-validate-strings-by-experimenter"},"The named set is used to validate strings by experimenter"),(0,i.kt)("p",null,"Over time, the number of queries can grow in the FML:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    queries:\n        string-alias: QueryName\n        type: Map<QueryName, String>\n        default:\n            ALWAYS: 'true'\n            USER_RECENTLY_INSTALLED: days_since_install < 7\n            USER_EN_SPEAKER: 'en' in locale\n            USER_DE_SPEAKER: 'de' in locale\n")),(0,i.kt)("p",null,"Defining ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," allows experimenter to validate a feature configuration before it reaches the application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "available-if": [\n        "USER_RECENTLY_INSTALLED",\n        "USER_ES_SPEAKER"\n    ]\n}\n')),(0,i.kt)("p",null,"In the above example, experimenter shows the user an error:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Invalid value "USER_ES_SPEAKER" for type QueryName; did you mean one of "ALWAYS", "USER_DE_SPEAKER", "USER_EN_SPEAKER" or "USER_RECENTLY_INSTALLED"?\n')),(0,i.kt)("h3",{id:"the-named-set-can-be-added-to-by-fml-authors-or-experiment-owners"},"The named set can be added to by FML authors or experiment owners"),(0,i.kt)("p",null,"This can be fixed by adding a query to the ",(0,i.kt)("inlineCode",{parentName:"p"},"queries")," map in the FML file ",(0,i.kt)("em",{parentName:"p"},"or")," the user can add it directly in the feature configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "queries": {\n        "USER_ES_SPEAKER": "\'es\' in locale"\n    },\n    "available-if": [\n        "USER_RECENTLY_INSTALLED",\n        "USER_ES_SPEAKER"\n    ]\n}\n')),(0,i.kt)("h2",{id:"defining-the-named-set-of-valid-strings"},"Defining the named set of valid strings"),(0,i.kt)("p",null,"We've seen how a string-alias can be used, and how ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryName")," was defined as a key in a map."),(0,i.kt)("p",null,"The valid set of strings can be defined by any existing ",(0,i.kt)("a",{parentName:"p",href:"/fml-spec#structural-types"},"structural types"),". Some contrived examples follow:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    surfaces:\n        type: List<SurfaceName>\n        string-alias: SurfaceName\n        default: []\n")),(0,i.kt)("p",null,"Any use of ",(0,i.kt)("inlineCode",{parentName:"p"},"SurfaceName")," must be contained in the list of ",(0,i.kt)("inlineCode",{parentName:"p"},"surfaces"),". This may be used as an alternative to an enum, used in a library, but whose variants are defined in an app, thereby breaking the compile-time dependency from library to app."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    experiment-slug:\n        type: ExperimentSlug\n        string-alias: ExperimentSlug\n        default: '{experiment}'\n")),(0,i.kt)("p",null,"Any use of ",(0,i.kt)("inlineCode",{parentName:"p"},"ExperimentSlug")," ",(0,i.kt)("em",{parentName:"p"},"must")," be the default value. In conjunction with an ",(0,i.kt)("inlineCode",{parentName:"p"},"Option<>")," at the usage site, this lets us specify either an exact value or ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("p",null,"For completeness, the string alias named set can be defined as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MyStringAlias"),": a single value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Map<MyStringAlias, _>"),": keys in a map"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Map<_, MyStringAlias>"),": values in a map"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"List<MyStringAlias>"),": items in a list"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Option<MyStringAliase>"),": an option"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Map<_, List<StringAlias>>"),": combinations of these structural types.")),(0,i.kt)("admonition",{title:"Restriction",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Only one string-alias can be defined per feature variable. The following\u2013 using one variable to define two named sets of strings\u2013 is not possible at this time."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    available-events:\n        string-alias: EventCategory, EventName\n        type: Map<EventCategory, List<EventName>>\n"))),(0,i.kt)("h3",{id:"string-aliases-can-be-used-in-nested-objects"},"String aliases can be used in nested objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"features:\n    my-onboarding-feature:\n        variables:\n            queries:\n                type: Map<QueryName>\n                string-alias: QueryName\n                default: {}\n            cards:\n                type: Map<CardKey, CardData>\n                string-alias: CardKey\nobjects:\n    CardData:\n        fields:\n            exclude-if:\n                type: List<QueryName>\n                default: []\n            include-if:\n                type: List<QueryName>\n                default: []\n")),(0,i.kt)("admonition",{title:"Restriction",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"String-alias can only be defined in a feature variable. The object can only be used, directly or indirectly, by a feature which defines the string-aliases it uses.")))}m.isMDXComponent=!0}}]);